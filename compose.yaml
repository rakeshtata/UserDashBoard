services:
  jsonServer-app:
    build: jsonServer/
    image: dashboard-jsonserver-image
    extra_hosts:
      - "dockerhost:172.18.0.1"
    ports:
      - "8000:8000"

  web-app:
    build: web/
    image: dashboard-web-image
    ports:
      - "3000:3000" 

  server-app:
    build: server/
    image: dashboard-server-image
    ports:
      - "4000:4000"
    networks:
      - app-network   
    depends_on:
      - redis
      - mongodb
    environment:
      - REDIS_HOST=172.18.0.1
      - REDIS_PORT=6379
      - MONGO_URI= mongodb://mongodb:27017/mydb
      # - REDIS_URL=redis://redis:6379
    # links:
    #   - redis


  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html
    depends_on:
      - server-app
    networks:
      - app-network

  redis:
    image: redis:6.2-alpine
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - redis:/data    

  mongodb:
    image: mongo:7.0
    container_name: mongodb # Assign a name to your container
    ports:
      - "27017:27017" # Map host port 27017 to container port 27017
    volumes:
      - ./mongodb_data:/data/db # Persist data in a named volume
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro  # optional for seeding data
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin # Set initial root username
      MONGO_INITDB_ROOT_PASSWORD: password # Set initial root password
      MONGO_INITDB_DATABASE: mydb

  # mongo-express:
  #   image: mongo-express:1.0.0-20
  #   container_name: mongo-express
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_SERVER: mongodb

networks:
  app-network:
    driver: bridge    
volumes:
  redis:
    driver: local
  mongodb_data: # Define the named volume for data persistence
    driver: local  
